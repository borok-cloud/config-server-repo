package com.mars.springboot.testcontainers.service;


import com.mars.springboot.testcontainers.domain.AuditLog;
import com.mars.springboot.testcontainers.repository.AuditLogRepository;
import jakarta.annotation.PostConstruct;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.support.TransactionTemplate;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.BlockingQueue;

@Service
public class NewAuditLogProcessor {

    private static final Logger logger = LoggerFactory.getLogger(AuditLogProcessor.class);

    private static final int LOG_BUCKET_SIZE = 1;
    private static final int QUEUE_SIZE_LIMIT = 20000;

    private final BlockingQueue<AuditLog> queue;
    private final AuditLogRepository auditLogRepository;

    @Autowired
    private PlatformTransactionManager transactionManager;


    public NewAuditLogProcessor(AuditLogRepository auditLogRepository) {
        this.auditLogRepository = auditLogRepository;
        this.queue = new ArrayBlockingQueue<>(QUEUE_SIZE_LIMIT);
    }

    @PostConstruct
    public void onStartup() {
        logger.info("AuditLogProcessor initialized with queue size limit {}", QUEUE_SIZE_LIMIT);
    }

    // This replaces the executorService.schedule(...) in your original code
    // Runs every 5 minutes
    @Scheduled(fixedDelay = 30000, initialDelay = 10)
    public void processQueue() {
        try {
            List<AuditLog> logs = new ArrayList<>();
            AuditLog log;

            while ((log = queue.poll()) != null) {
                logs.add(log);
                logger.info("Dequeued 1 entry");

                if (logs.size() == LOG_BUCKET_SIZE) {
                    flushLogs(logs);
                }
            }

            // Flush remaining logs if any
            if (!logs.isEmpty()) {
                logger.info("Flushing remaining {} logs", logs.size());
                auditLogRepository.saveAll(logs);
            }

        } catch (Exception e) {
            logger.error("Error processing audit logs", e);
        }
    }

    private void flushLogs(List<AuditLog> logs) {
        logger.info("logs reached bucket size, flushing..");
        TransactionTemplate transactionTemplate = new TransactionTemplate(transactionManager);
        transactionTemplate.execute(status -> {
            auditLogRepository.saveAll(logs);
            logs.forEach(log -> logger.info("Saved log ID: {}", log.getId()));
            return null;
        });
        logs.clear();
    }

    public void enqueue(AuditLog auditLog) {
        try {
            logger.info("Enqueuing audit log: {}", auditLog);
            if (!queue.offer(auditLog)) {
                logger.warn("Queue is full, could not enqueue audit log: {}", auditLog);
            } else {
                logger.info("Successfully enqueued audit log: {}", auditLog);
            }
        } catch (Exception e) {
            logger.error("Error enqueuing audit log", e);
        }
    }
}
